{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack:///./src/taskpane/taskpane.ts?","webpack:///webpack/startup?"],"sourcesContent":["/** Copyright (c) Microsoft Corporation. Licensed under the MIT License. */\r\n\r\n/** Set up the task pane buttons and select list. */\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    // Assign the HTML buttons to the relevant method.\r\n    document.getElementById(\"setData\").onclick = setData;\r\n    document.getElementById(\"getData\").onclick = getData;\r\n    document.getElementById(\"clearForm\").onclick = clearForm;\r\n\r\n    // Update the displayed input fields based on the select list. \r\n    $(\"#dataTypeSelect\").on(\"change\", function() {\r\n      let value = $(\"#dataTypeSelect option:selected\");\r\n      setSelectedType(getTypeContent(value.val().toString()));\r\n    });\r\n\r\n    setSelectedType(getTypeContent(defaultType));\r\n  }\r\n});\r\n\r\n/** Set the contents in the task pane fields to the selected cell, \r\n *  as the chosen data type. */\r\nasync function setData() {\r\n  await Excel.run(async (context) => {\r\n    const activeCell = context.workbook.getActiveCell();\r\n    activeCell.valuesAsJson = [[createValueAsJson()]];\r\n\r\n    await tryCatch(context.sync);\r\n\r\n    // Clear the input fields in the task pane after creating the data type. \r\n    clearForm();\r\n  });\r\n}\r\n\r\n/** Retrieve the contents of a selected cell and put them in the input fields \r\n *  in the task pane. */\r\nasync function getData() {\r\n  await Excel.run(async (context) => {\r\n    const activeCell = context.workbook.getActiveCell();\r\n    activeCell.load(\"valuesAsJson\");\r\n    await context.sync();\r\n    const value = activeCell.valuesAsJson[0][0];\r\n    clearForm();\r\n\r\n    let valueType = value.type == \"LinkedEntity\" ? \"Entity\" : value.type;\r\n    $(\"#dataTypeSelect\").val(valueType);\r\n    setSelectedType(getTypeContent(valueType));\r\n\r\n    switch (value.type) {\r\n      case \"String\":\r\n        $(\"#basicValue\").val(value.basicValue);\r\n        break;\r\n      case \"Double\":\r\n        $(\"#basicValue\").val(value.basicValue);\r\n        break;\r\n      case \"Boolean\":\r\n        const basicValue = value.basicValue;\r\n        if (basicValue) {\r\n          $(\"#basicValue\").val(\"true\");\r\n        } else {\r\n          $(\"#basicValue\").val(\"false\");\r\n        }\r\n        break;\r\n      case \"WebImage\":\r\n        $(\"#url\").val(value.address);\r\n        $(\"#altText\").val(value.altText);\r\n        break;\r\n      case \"FormattedNumber\":\r\n        $(\"#format\").val(value.numberFormat);\r\n        $(\"#number\").val(value.basicValue);\r\n        break;\r\n      case \"Entity\":\r\n      case \"LinkedEntity\":\r\n        getEntity(value);\r\n        break;\r\n    }\r\n  });\r\n}\r\n\r\n/** Clear the input fields in the task pane. */\r\nasync function clearForm() {\r\n  $(\".inputBox\").val(\"\");\r\n  $(\".cardView\").prop(\"checked\", true);\r\n  $(\".autoComplete\").prop(\"checked\", true);\r\n  $(\".calcCompare\").prop(\"checked\", true);\r\n  $(\".dotNotation\").prop(\"checked\", true);\r\n  $(\".mainImage\").prop(\"checked\", false);\r\n  $(\".sublabel\").val(\"\");\r\n  $(\".specificFieldContents\").remove();\r\n  $(\".sectionContents\").remove();\r\n  $(\"#iconSelect\").val(\"Generic\");\r\n\r\n  setSelectedType(\r\n    getTypeContent(\r\n      $(\"#dataTypeSelect\")\r\n        .val()\r\n        .toString()\r\n    )\r\n  );\r\n}\r\n\r\n/** \r\n * Helper functions for setData, getData, and clearForm.\r\n */\r\nconst defaultType: string = \"FormattedNumber\";\r\n\r\nfunction textInputWithLabel(inputID: string, labelText: string, altText: string): JQuery<HTMLElement>[] {\r\n  return [\r\n    $(\"<td>\").append($(\"<label/>\", { for: inputID, class: \"labels\" }).text(labelText)),\r\n    $(\"<td>\").append($(\"<input/>\", { class: \"inputBox \" + inputID, type: \"text\", id: inputID, alt: altText }))\r\n  ];\r\n}\r\n\r\nfunction checkboxWithLabel(inputID: string, labelText: string, altText: string): JQuery<HTMLElement> {\r\n  return $(\"<div/>\", { class: \"checkboxes\" })\r\n    .append($(\"<input/>\", { type: \"checkbox\", class: inputID, checked: true, alt: altText }))\r\n    .append($(\"<label/>\").text(labelText));\r\n}\r\n\r\nfunction stringContent(): JQuery<HTMLElement> {\r\n  return basicContent(\"String\");\r\n}\r\n\r\nfunction booleanContent(): JQuery<HTMLElement> {\r\n  return basicContent(\"Boolean\");\r\n}\r\n\r\nfunction doubleContent(): JQuery<HTMLElement> {\r\n  return basicContent(\"Double\");\r\n}\r\n\r\nfunction basicContent(contentType: string): JQuery<HTMLElement> {\r\n  return $(\"<tr/>\", { id: contentType, class: \"fieldValueContents\" }).append(\r\n    textInputWithLabel(\"basicValue\", \"Value: \", \"value input box\")\r\n  );\r\n}\r\n\r\nfunction webImageContent(): JQuery<HTMLElement>[] {\r\n  return [\r\n    $(\"<tr/>\", { id: \"WebImage\", class: \"fieldValueContents\" }).append(\r\n      textInputWithLabel(\"url\", \"Image url: \", \"Image url input box\")\r\n    ),\r\n    $(\"<tr/>\").append(textInputWithLabel(\"altText\", \"[Recommended] Alt-text: \", \"Alt-text input box\"))\r\n  ];\r\n}\r\n\r\nfunction formattedNumberContent(): JQuery<HTMLElement>[] {\r\n  return [\r\n    $(\"<tr/>\", { id: \"FormattedNumber\", class: \"fieldValueContents\" }).append(\r\n      textInputWithLabel(\"number\", \"Number: \", \"Number input box\")\r\n    ),\r\n    $(\"<tr/>\").append(textInputWithLabel(\"format\", \"Format: \", \"Format input box\"))\r\n  ];\r\n}\r\n\r\nfunction unsupportedContent(): JQuery<HTMLElement> {\r\n  return $(\"<tr/>\", { id: \"Unsupported\", class: \"fieldValueContents\" })\r\n    .append($(\"<td/>\").append($(\"<label/>\", { for: \"unsupportedValue\", class: \"labels\" }).text(\"unsupportedValue: \")))\r\n    .append(\r\n      $(\"<td/>\").append(\r\n        $(\"<input>\", {\r\n          class: \"inputBox unsupportedValue\",\r\n          disabled: true,\r\n          type: \"text\",\r\n          name: \"unsupportedValue\",\r\n          id: \"unsupportedValue\",\r\n          alt: \"unsupportedValue input box\"\r\n        })\r\n      )\r\n    );\r\n}\r\n\r\nfunction createOptionsFromList(list: string[]): JQuery<HTMLElement>[] {\r\n  let options = [];\r\n  list.forEach(function(val) {\r\n    const noSpaceVal = val.replace(\" \", \"\");\r\n    options.push($(\"<option/>\", { class: \"type\" + noSpaceVal, value: noSpaceVal }).text(val));\r\n  });\r\n\r\n  return options;\r\n}\r\n\r\nfunction specificFieldContent(): JQuery<HTMLElement> {\r\n  let content = entityContents(\"String\"); // Set the default data type inside an entity to \"String\".\r\n  let label = $(\"<label><strong>Data type: </strong></label>\");\r\n  let select = $(\"<select/>\", {\r\n    id: \"dataTypeSelectEntity\",\r\n    name: \"dataType\",\r\n    class: \"dataTypeSelectEntity ms-Button ms-Button-label buttons\",\r\n  });\r\n\r\n  select[0].onchange = function() {\r\n    let options = (select[0] as HTMLSelectElement).options;\r\n    let valueType = options.item(options.selectedIndex).value;\r\n    $(content)\r\n      .children()\r\n      .replaceWith(entityContents(valueType).children());\r\n  };\r\n\r\n  let options = createOptionsFromList([\"String\", \"Double\", \"Boolean\", \"Web Image\", \"Formatted Number\"]);\r\n  for (let i = 0; i < options.length; ++i) {\r\n    select.append(options[i]);\r\n  }\r\n\r\n  select.append($(\"<option/>\", { class: \"typeUnsupported\", value: \"Unsupported\", disabled: true }).text(\"Unsupported\"));\r\n\r\n  let table = $(\"<table/>\", { id: \"fieldTable\" }).append(\r\n    $(\"<tbody/>\").append($(\"<tr/>\").append($(\"<td/>\").append(label).append(select)))\r\n  );\r\n\r\n  return $(\"<div/>\", { id: \"specificField\", class: \"specificFieldContents formContents solidBorder\" })\r\n    .append(table)\r\n    .append(content);\r\n}\r\n\r\nfunction entitySectionContent(): JQuery<HTMLElement> {\r\n  let fields = $(`<div class=\"fields\"/>`).append(specificFieldContent());\r\n  let section = $(`<div class=\"collapsibleSection\" aria-expanded=\"true\"/>`).append(fields);\r\n\r\n  let newFieldButton = $(\"<button/>\", {\r\n    id: \"addField\",\r\n    class: \"ms-Button ms-Button-label buttons\",\r\n    alt: \"add another field to current section\",\r\n    style: \"margin-left:20px;\"\r\n  }).text(\"Add another field\");\r\n\r\n  /** Add a new field to selected section in the entity contents */\r\n  newFieldButton[0].onclick = function() {\r\n    $(fields).append(specificFieldContent());\r\n  };\r\n\r\n  section.append(newFieldButton);\r\n\r\n  return section;\r\n}\r\n\r\nfunction entityDefaultSection(): JQuery<HTMLElement> {\r\n  let defaultSection = $(`<div id=\"defaultSection\" class=\"sectionContents formContents solidBorder\"/>`);\r\n  let label = $(\"<label/>\", { class: \"sectionHeader\" }).text(\"Default section: \");\r\n\r\n  defaultSection.append([label, entitySectionContent()]);\r\n\r\n  return defaultSection;\r\n}\r\n\r\nfunction entitySection(): JQuery<HTMLElement> {\r\n  let element = $(\"<div/>\", { class: \"sectionContents formContents solidBorder\" });\r\n  let table1 = $(`\r\n              <table id=\"sectionTable\">\r\n                <tbody>\r\n                  <tr class=\"columnTitle\">\r\n                    <td><label class=\"sectionHeader\">Section Title:</label></td>\r\n                    <td><input class=\"inputBox sectionTitle\" alt=\"section title input box\"/></td>\r\n                    <td>\r\n                      <button class=\"ms-Button ms-Button-label arrows sectionToggle\" onclick=\"collapseSection(this)\" alt=\"collapse section\" title=\"collapse section\" style=\"visibility:visible\">&#x2228</button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>`);\r\n\r\n  let removeSectionButton = $(\"<button/>\", {\r\n    class: \"ms-Button ms-Button-label buttons\",\r\n    alt: \"delete current section and its contents\"\r\n  }).text(\"Delete Section and its Contents\");\r\n\r\n  /** Remove the selected section in the entity contents. */\r\n  removeSectionButton[0].onclick = function() {\r\n    $(element).remove();\r\n  };\r\n\r\n  element.append(table1);\r\n  element.append(entitySectionContent().append(removeSectionButton));\r\n\r\n  return element;\r\n}\r\n\r\nfunction getTypeContent(valueType: string): JQuery<HTMLElement> | JQuery<HTMLElement>[] {\r\n  switch (valueType) {\r\n    case \"String\":\r\n      return stringContent();\r\n    case \"Double\":\r\n      return doubleContent();\r\n    case \"Boolean\":\r\n      return booleanContent();\r\n    case \"FormattedNumber\":\r\n      return formattedNumberContent();\r\n    case \"WebImage\":\r\n      return webImageContent();\r\n    case \"Entity\":\r\n      return entityContent();\r\n    case \"Unsupported\":\r\n    default:\r\n      return unsupportedContent();\r\n  }\r\n}\r\n\r\n/** Create the HTML for entity contents section. */\r\nfunction entityContents(valueType: string): JQuery<HTMLElement> {\r\n  let trKey = $(`<tr>\r\n          <td><label class=\"labels\">Key:</label></td>\r\n          <td><input class=\"inputBox fieldName\" alt=\"Key input box\"/></td>\r\n        </tr>`);\r\n\r\n  let tdMetadata = $(`<td colspan=\"4\" class=\"center settings\"/>`);\r\n\r\n  if (valueType == \"WebImage\") {\r\n    tdMetadata.append(checkboxWithLabel(\"mainImage\", \"Make main image\", \"main image checkbox\"));\r\n    tdMetadata.append($(\"<br/>\"));\r\n  }\r\n\r\n  tdMetadata.append([\r\n    checkboxWithLabel(\"cardView\", \"Card View\", \"cardview checkbox\"),\r\n    checkboxWithLabel(\"autoComplete\", \"Autocomplete\", \"autoComplete checkbox\"),\r\n    $(\"<br/>\"),\r\n    checkboxWithLabel(\"calcCompare\", \"Calc compare\", \"calcCompare checkbox\"),\r\n    checkboxWithLabel(\"dotNotation\", \"Dot notation\", \"dotNotation checkbox\"),\r\n    $(\"<br/>\"),\r\n    $(\"<label/>\").text(\"Sublabel: \"),\r\n    $(\"<input/>\", { class: \"sublabel\", alt: \"sublabel input box\" })\r\n  ]);\r\n\r\n  let trMetadata = $(`<tr class=\"metadata\" style=\"visibility:collapse\"/>`).append(tdMetadata);\r\n\r\n  let trButtons = $(`<tr/>`);\r\n  let tdButtons = $(`<td colspan=\"4\"/>`);\r\n\r\n  let buttonToggleMetadata = $(\r\n    `<button class=\"ms-Button ms-Button-label buttons\" alt=\"Toggle to expand or collapse metadata properties of field\">More settings</button>`\r\n  );\r\n\r\n  /** Expand or collapse the additional metadata contents of a\r\n  particular input field, within the entity contents. */\r\n  buttonToggleMetadata[0].onclick = function() {\r\n    let visibility = trMetadata[0].style.visibility;\r\n    if (visibility != \"collapse\") {\r\n      trMetadata[0].style.visibility = \"collapse\";\r\n    } else {\r\n      trMetadata[0].style.visibility = \"visible\";\r\n    }\r\n  };\r\n\r\n  tdButtons.append([buttonToggleMetadata]);\r\n  trButtons.append(tdButtons);\r\n\r\n  return $(`<div id=\"entityContents\"/>`).append(\r\n    $(`<table id=\"fieldTable\"/>`).append(\r\n      $(`<tbody/>`)\r\n        .append(trKey)\r\n        .append(getTypeContent(valueType))\r\n        .append([trMetadata, trButtons])\r\n    )\r\n  );\r\n}\r\n\r\n/** Create the HTML for the entity data type. */\r\nfunction entityContent(): JQuery<HTMLElement> {\r\n  let div = $(`<div class=\"contentPadding\"/>`);\r\n  let iconlabel = $(`<label class=\"labels\"> Entity icon: </label>`);\r\n  let contentLabel = $(`<label class=\"labels contentPadding\">Entity contents:</label>`);\r\n  let select = $(`<select id=\"iconSelect\" name=\"dataType\" class=\"ms-Button ms-Button-label buttons\"/>`);\r\n  let options = createOptionsFromList(Object.values(Excel.EntityCompactLayoutIcons));\r\n\r\n  for (let i = 0; i < options.length; ++i) {\r\n    select.append(options[i]);\r\n  }\r\n\r\n  div.append(iconlabel);\r\n  div.append(select);\r\n\r\n  let sections = $(`<div class=\"sections\"/>`).append(entityDefaultSection());\r\n\r\n  let label = $(`<label for=\"displayString\" class=\"labels\">Entity display text: </label>`);\r\n  let input = $(`<input class=\"inputBox displayString\" type=\"text\" id=\"displayString\" alt=\"display text input box\"/>`);\r\n\r\n  let providerTable = $(`<div id=\"entityContents\" class=\"solidBorder formContents\"/>`).append(\r\n    $(`<table id=\"fieldTable\"/>`).append(\r\n      $(`<tbody/>`)\r\n        .append(\r\n          $(\"<tr/>\").append(\r\n            textInputWithLabel(\"providerDescription\", \"Description: \", \"Provider description input box\")\r\n          )\r\n        )\r\n        .append(\r\n          $(\"<tr/>\").append(textInputWithLabel(\"providerTarget\", \"Provider address: \", \"Provider source input box\"))\r\n        )\r\n        .append($(\"<tr/>\").append(textInputWithLabel(\"providerLogo\", \"Logo address: \", \"Provider logo input box\")))\r\n    )\r\n  );\r\n\r\n  let referencedValuesLabel = $(`<label for=\"referencedValues\" class=\"labels\">Referenced values: </label>`);\r\n  let referencedValuesInput = $(\r\n    `<input class=\"inputBox displayString\" type=\"text\" id=\"referencedValues\" alt=\"referencedValues text display box\" disabled/>`\r\n  );\r\n  let referencedValuesClearButton = $(\"<button/>\", {\r\n    id: \"clearReferencedValue\",\r\n    class: \"ms-Button ms-Button-label buttons\",\r\n    text: \"Clear referencedValues\"\r\n  });\r\n\r\n  let referencedValuesDiv = $(\"<div/>\", { id: \"referencedValuesDiv\" })\r\n    .append(referencedValuesLabel)\r\n    .append(referencedValuesInput)\r\n    .append(referencedValuesClearButton);\r\n\r\n  referencedValuesDiv[0].style.display = \"none\";\r\n\r\n  referencedValuesClearButton[0].onclick = function() {\r\n    referencedValuesInput.val(\"\");\r\n    referencedValuesDiv[0].style.display = \"none\";\r\n  };\r\n\r\n  let providerInfo = $(\"<div/>\", { class: \"contentPadding\" })\r\n    .append($(\"<label/>\", { class: \"labels\" }).text(\"Provider info: \"))\r\n    .append(providerTable);\r\n\r\n  let element = $(`<tr id=\"Entity\"/>`).append(\r\n    $(`<td colspan=\"2\"/>`)\r\n      .append([label, input])\r\n      .append(div)\r\n      .append(providerInfo)\r\n      .append(referencedValuesDiv)\r\n      .append(contentLabel)\r\n      .append(sections)\r\n  );\r\n\r\n  return element;\r\n}\r\n\r\n/** Create the HTML for when boolean, string, or double data types are selected */\r\nfunction setSelectedType(selected: JQuery<HTMLElement>[] | JQuery<HTMLElement>) {\r\n  let element = $(`<div class= \"backgroundColorForm solidBorder\"/>`);\r\n  element.append(selected);\r\n\r\n  $(\".backgroundColorForm\").replaceWith(element);\r\n}\r\n\r\n/** Add a new field to the entity fields. */\r\nfunction addField(element: HTMLButtonElement) {\r\n  // Append specificFieldContents to the fieldsDiv.\r\n  const fieldsDiv = element.parentElement.previousElementSibling;\r\n  $(fieldsDiv).append(specificFieldContent());\r\n}\r\n\r\n/** Expand the section fields in the entity field. */\r\nfunction expandSection(element: HTMLButtonElement) {\r\n  $(element).replaceWith(\r\n    `<button class=\"ms-Button ms-Button-label arrows sectionToggle\" onclick=\"collapseSection(this)\" alt=\"collapse section\" title=\"collapse section\">&#x2228</button>`\r\n  );\r\n}\r\n\r\n/** Collapse the section fields in the entity field. */\r\nfunction collapseSection(element: HTMLButtonElement) {\r\n  $(element).replaceWith(\r\n    `<button class=\"ms-Button ms-Button-label arrows sectionToggle\" onclick=\"expandSection(this)\" alt=\"expand section\" title=\"expand section\" >&#x2227 </button>`\r\n  );\r\n}\r\n\r\n/** Assign the inputted data to the active worksheet cell as the appropriate data type. */\r\nfunction createValueAsJson(): Excel.CellValue {\r\n  let values = $(\"#dataTypeSelect option:selected\");\r\n  switch (values.val()) {\r\n    case \"String\":\r\n      let stringValue = $(\"#basicValue\")\r\n        .val()\r\n        .toString();\r\n      return {\r\n        type: Excel.CellValueType.string,\r\n        basicValue: stringValue\r\n      } as Excel.StringCellValue;\r\n\r\n    case \"Double\":\r\n      var doubleValue = Number($(\"#basicValue\").val());\r\n      if (!isNaN(doubleValue)) {\r\n        return {\r\n          type: Excel.CellValueType.double,\r\n          basicValue: doubleValue\r\n        } as Excel.DoubleCellValue;\r\n      } else {\r\n        alert(\"Type 'Double' selected but input was not a double.\");\r\n      }\r\n      break;\r\n\r\n    case \"Boolean\":\r\n      let booleanValue = $(\"#basicValue\")\r\n        .val()\r\n        .toString();\r\n      if (booleanValue.toLowerCase() === \"true\") {\r\n        return {\r\n          type: Excel.CellValueType.boolean,\r\n          basicValue: true\r\n        } as Excel.BooleanCellValue;\r\n      } else if (booleanValue.toLowerCase() === \"false\") {\r\n        return {\r\n          type: Excel.CellValueType.boolean,\r\n          basicValue: false\r\n        } as Excel.BooleanCellValue;\r\n      } else {\r\n        alert(\"Type 'Boolean' selected but input was not a boolean.\");\r\n      }\r\n      break;\r\n\r\n    case \"Entity\":\r\n      return setEntity();\r\n\r\n    case \"WebImage\":\r\n      let url = $(\"#url\")\r\n        .val()\r\n        .toString();\r\n      let altText = $(\"#altText\")\r\n        .val()\r\n        .toString();\r\n      return {\r\n        type: Excel.CellValueType.webImage,\r\n        address: url,\r\n        altText: altText\r\n      };\r\n\r\n    case \"FormattedNumber\":\r\n      var doubleValue = Number($(\"#number\").val());\r\n      let format = $(\"#format\").val();\r\n      if (!isNaN(doubleValue)) {\r\n        return {\r\n          type: Excel.CellValueType.formattedNumber,\r\n          basicValue: doubleValue,\r\n          numberFormat: format\r\n        } as Excel.FormattedNumberCellValue;\r\n      } else {\r\n        alert(\"Type 'FormattedNumber' selected but input was not a number.\");\r\n      }\r\n      break;\r\n  }\r\n}\r\n\r\n/** Assign the inputted entity contents to an entity data type. */\r\nfunction setEntity() {\r\n  const display: string = $(\"#displayString\")\r\n    .val()\r\n    .toString();\r\n  let iconName: string = $(\"#iconSelect option:selected\").val() as string;\r\n  const referencedValues: string = $(\"#referencedValues\").val() as string;\r\n  const fields = valuesFromQuery(\".fieldName\");\r\n  const values = fieldValuesContentsFromQuery();\r\n  const cardViews = valuesFromQuery(\".cardView\");\r\n  const autoCompletes = valuesFromQuery(\".autoComplete\");\r\n  const calcCompares = valuesFromQuery(\".calcCompare\");\r\n  const dotNotation = valuesFromQuery(\".dotNotation\");\r\n  const sublabels = valuesFromQuery(\".sublabel\");\r\n  let mainImage = valuesFromQuery(\".mainImage\");\r\n  let providerInfo = [\r\n    valuesFromQuery(\"#providerDescription\"),\r\n    valuesFromQuery(\"#providerTarget\"),\r\n    valuesFromQuery(\"#providerLogo\")\r\n  ];\r\n  let mainImageExists = false;\r\n  let mainImageKey;\r\n  let sectionArray = [];\r\n  let jqSectionContents = $(\".sectionContents\");\r\n\r\n  let fDefaultSection: Boolean = true;\r\n  while (jqSectionContents.length > 0) {\r\n    const first = jqSectionContents.first();\r\n    let children = first.find(\".fieldName\");\r\n    let sectionTitle = first.find(\".sectionTitle\");\r\n    let properties = [];\r\n    for (let i = 0; i < children.length; ++i) {\r\n      let val = $(children[i]).val();\r\n      properties.push(val);\r\n    }\r\n\r\n    // First section is the default; not really a section.\r\n    if (fDefaultSection) {\r\n      fDefaultSection = false;\r\n      jqSectionContents = jqSectionContents.slice(1);\r\n      continue;\r\n    }\r\n\r\n    let sectionEntry = {\r\n      layout: \"List\",\r\n      title: sectionTitle.val(),\r\n      properties: properties\r\n    };\r\n    sectionArray.push(sectionEntry);\r\n    jqSectionContents = jqSectionContents.slice(1);\r\n  }\r\n\r\n  let entity: Excel.EntityCellValue = {\r\n    type: Excel.CellValueType.entity,\r\n    text: display,\r\n    properties: {},\r\n    layouts: {\r\n      card: {},\r\n      compact: {}\r\n    }\r\n  };\r\n\r\n  if (providerInfo[0][0] != \"\" || providerInfo[1][0] != \"\" || providerInfo[2][0] != \"\") {\r\n    entity.provider = {\r\n      description: providerInfo[0][0],\r\n      logoTargetAddress: providerInfo[1][0],\r\n      logoSourceAddress: providerInfo[2][0]\r\n    };\r\n  }\r\n\r\n  for (let i = 0; i < fields.length; ++i) {\r\n    let curSectionFields = [];\r\n    const field = fields[i];\r\n    let value = values[i];\r\n    if (field == \"\" || value == \"\") {\r\n      break;\r\n    }\r\n    let featureIntegration = {};\r\n    if (!cardViews[i]) {\r\n      featureIntegration[\"cardView\"] = true;\r\n    }\r\n    if (!autoCompletes[i]) {\r\n      featureIntegration[\"autoComplete\"] = true;\r\n    }\r\n    if (!calcCompares[i]) {\r\n      featureIntegration[\"calcCompare\"] = true;\r\n    }\r\n    if (!dotNotation[i]) {\r\n      featureIntegration[\"dotNotation\"] = true;\r\n    }\r\n    let propertyMetadata = {};\r\n    if (Object.keys(featureIntegration).length > 0) {\r\n      propertyMetadata[\"excludeFrom\"] = featureIntegration;\r\n    }\r\n    if (sublabels[i] != \"\") {\r\n      propertyMetadata[\"sublabel\"] = sublabels[i];\r\n    }\r\n    if (value.type == \"WebImage\") {\r\n      if (mainImage[0] && !mainImageExists) {\r\n        mainImageKey = field;\r\n        mainImageExists = true;\r\n      }\r\n      mainImage = mainImage.slice(1);\r\n    }\r\n\r\n    if (Object.keys(propertyMetadata).length > 0) {\r\n      value[\"propertyMetadata\"] = propertyMetadata;\r\n    }\r\n    entity.properties[field] = value;\r\n  }\r\n  if (mainImageExists) {\r\n    entity.layouts.card = {\r\n      mainImage: {\r\n        property: mainImageKey\r\n      },\r\n      sections: sectionArray\r\n    };\r\n  } else {\r\n    entity.layouts.card = {\r\n      sections: sectionArray\r\n    };\r\n  }\r\n\r\n  if (referencedValues != \"\") {\r\n    entity.referencedValues = JSON.parse(referencedValues);\r\n  }\r\n\r\n  if (iconName != \"Generic\") {\r\n    entity.layouts.compact[\"icon\"] = iconName;\r\n  }\r\n  return entity;\r\n}\r\n\r\n/** Helper function to retrieve jQuery values for setEntity(). */\r\nfunction valuesFromQuery(query: string) {\r\n  let jq = $(query);\r\n  let result = [];\r\n  while (jq.length > 0) {\r\n    const first = jq.first();\r\n    if (first.is(\"input[type=checkbox]\")) {\r\n      result.push(first.prop(\"checked\"));\r\n    } else {\r\n      result.push(first.val());\r\n    }\r\n    jq = jq.slice(1);\r\n  }\r\n  return result;\r\n}\r\n/** Helper function to retrieve fieldValue contents for setEntity(). */\r\nfunction fieldValuesContentsFromQuery() {\r\n  let jqFieldContents = $(\".fieldValueContents\");\r\n  let jqBasicValue = $(\".basicValue\");\r\n  let jqUrl = $(\".url\");\r\n  let jqNumber = $(\".number\");\r\n  let jqFormat = $(\".format\");\r\n  let jqAltText = $(\".altText\");\r\n  let jqUnsupportedValue = $(\".unsupportedValue\");\r\n  let values = [];\r\n  while (jqFieldContents.length > 0) {\r\n    const first = jqFieldContents.first();\r\n    let valueType = first.attr(\"id\");\r\n    let value;\r\n    switch (valueType) {\r\n      case \"String\":\r\n        value = {\r\n          type: Excel.CellValueType.string,\r\n          basicValue: jqBasicValue\r\n            .first()\r\n            .val()\r\n            .toString()\r\n        } as Excel.StringCellValue;\r\n        jqBasicValue = jqBasicValue.slice(1);\r\n        break;\r\n      case \"FormattedNumber\":\r\n        var doubleValue = Number(jqNumber.first().val());\r\n        if (!isNaN(doubleValue)) {\r\n          value = {\r\n            type: Excel.CellValueType.formattedNumber,\r\n            basicValue: doubleValue,\r\n            numberFormat: jqFormat\r\n              .first()\r\n              .val()\r\n              .toString()\r\n          };\r\n        } else {\r\n          alert(\"Type 'FormattedNumber' selected but input was not a number.\");\r\n        }\r\n        jqNumber = jqNumber.slice(1);\r\n        jqFormat = jqFormat.slice(1);\r\n        break;\r\n      case \"Double\":\r\n        var doubleValue = Number(jqBasicValue.first().val());\r\n        if (!isNaN(doubleValue)) {\r\n          value = {\r\n            type: Excel.CellValueType.double,\r\n            basicValue: doubleValue\r\n          } as Excel.DoubleCellValue;\r\n        } else {\r\n          alert(\"Type 'Double' selected but input was not a double.\");\r\n        }\r\n        jqBasicValue = jqBasicValue.slice(1);\r\n        break;\r\n      case \"Boolean\":\r\n        let booleanValue = jqBasicValue\r\n          .first()\r\n          .val()\r\n          .toString();\r\n        if (booleanValue.toLowerCase() === \"true\") {\r\n          value = {\r\n            type: Excel.CellValueType.boolean,\r\n            basicValue: true\r\n          } as Excel.BooleanCellValue;\r\n        } else if (booleanValue.toLowerCase() === \"false\") {\r\n          value = {\r\n            type: Excel.CellValueType.boolean,\r\n            basicValue: false\r\n          } as Excel.BooleanCellValue;\r\n        } else {\r\n          alert(\"Type 'Boolean' selected but input was not a boolean.\");\r\n        }\r\n        jqBasicValue = jqBasicValue.slice(1);\r\n        break;\r\n      case \"WebImage\":\r\n        value = {\r\n          type: Excel.CellValueType.webImage,\r\n          address: jqUrl.first().val(),\r\n          altText: jqAltText.first().val()\r\n        } as Excel.WebImageCellValue;\r\n        jqUrl = jqUrl.slice(1);\r\n        jqAltText = jqAltText.slice(1);\r\n        break;\r\n      case \"Unsupported\":\r\n        value = JSON.parse(\r\n          jqUnsupportedValue\r\n            .first()\r\n            .val()\r\n            .toString()\r\n        );\r\n        jqUnsupportedValue = jqUnsupportedValue.slice(1);\r\n        break;\r\n    }\r\n    values.push(value);\r\n    jqFieldContents = jqFieldContents.slice(1);\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\n/** Retrieve the contents of a selected entity and put them in the form boxes. */\r\nfunction getEntity(value) {\r\n  let sections;\r\n  if (value.layouts != undefined && value.layouts.card != undefined) {\r\n    sections = value.layouts.card.sections;\r\n  }\r\n\r\n  // If there is no section, make one.\r\n  if (sections == undefined) {\r\n    const propertyKeys = Object.keys(value.properties);\r\n    sections = [\r\n      {\r\n        layout: \"List\",\r\n        properties: propertyKeys\r\n      }\r\n    ];\r\n  }\r\n\r\n  if (value.referencedValues != undefined) {\r\n    $(\"#referencedValues\").val(JSON.stringify(value.referencedValues));\r\n    $(\"#referencedValuesDiv\")[0].style.display = \"block\";\r\n  } else {\r\n    $(\"#clearReferencedValue\")[0].onclick(null);\r\n  }\r\n\r\n  if (value.provider != undefined) {\r\n    if (value.provider.description != undefined) {\r\n      $(\"#providerDescription\").val(value.provider.description);\r\n    }\r\n\r\n    if (value.provider.description != undefined) {\r\n      $(\"#providerTarget\").val(value.provider.logoTargetAddress);\r\n    }\r\n\r\n    if (value.provider.description != undefined) {\r\n      $(\"#providerLogo\").val(value.provider.logoSourceAddress);\r\n    }\r\n  }\r\n\r\n  let propertyKeysOrdered = [];\r\n  for (let i = 0; i < sections.length; ++i) {\r\n    $(\".sectionTitle\")\r\n      .last()\r\n      .val(sections[i].title);\r\n    let sectionKeys = sections[i].properties;\r\n    $(\".specificFieldContents\")\r\n      .last()\r\n      .remove();\r\n    for (let j = 0; j < sectionKeys.length; ++j) {\r\n      $(\".fields\")\r\n        .last()\r\n        .append(specificFieldContent());\r\n      const propertyName = sectionKeys[j];\r\n      propertyKeysOrdered.push(propertyName);\r\n      const propertyValue = value.properties[propertyName];\r\n      const entityContentsDiv = $(\".dataTypeSelectEntity\")\r\n        .last()\r\n        .parent()\r\n        .parent()\r\n        .parent()\r\n        .parent()\r\n        .next()\r\n        .children();\r\n      switch (propertyValue.type) {\r\n        case \"Double\":\r\n          $(\".dataTypeSelectEntity\")\r\n            .last()\r\n            .val(\"Double\");\r\n          entityContentsDiv.replaceWith(entityContents(propertyValue.type).children());\r\n          break;\r\n        case \"Boolean\":\r\n          $(\".dataTypeSelectEntity\")\r\n            .last()\r\n            .val(\"Boolean\");\r\n          entityContentsDiv.replaceWith(entityContents(propertyValue.type).children());\r\n          break;\r\n        case \"FormattedNumber\":\r\n          $(\".dataTypeSelectEntity\")\r\n            .last()\r\n            .val(\"FormattedNumber\");\r\n          entityContentsDiv.replaceWith(entityContents(propertyValue.type).children());\r\n          break;\r\n        case \"WebImage\":\r\n          $(\".dataTypeSelectEntity\")\r\n            .last()\r\n            .val(\"WebImage\");\r\n          entityContentsDiv.replaceWith(entityContents(propertyValue.type).children());\r\n          const firstMetadataElement = $(\".cardView\")\r\n            .last()\r\n            .parent();\r\n          firstMetadataElement.before(`<div class=\"checkboxes\">\r\n                  <input type=\"checkbox\" class=\"mainImage\" alt=\"main image checkbox\"/>\r\n                  <label>Make main image</label>\r\n                </div><br>`);\r\n          break;\r\n        case \"String\":\r\n          $(\".dataTypeSelectEntity\")\r\n            .last()\r\n            .val(\"String\");\r\n          entityContentsDiv.replaceWith(entityContents(propertyValue.type).children());\r\n          break;\r\n        default:\r\n          /*unsupported*/\r\n          $(\".dataTypeSelectEntity\")\r\n            .last()\r\n            .val(\"Unsupported\");\r\n          entityContentsDiv.replaceWith(entityContents(\"Unsupported\").children());\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Write the entity's data into the table.\r\n  $(\"#displayString\").val(value.text);\r\n  if (value.layouts == undefined || value.layouts.compact == undefined) $(\"#iconSelect\").val(\"Generic\");\r\n  else if (value.layouts.compact[\"icon\"] != undefined) {\r\n    $(\"#iconSelect\").val(value.layouts.compact[\"icon\"]);\r\n  }\r\n  let jqFields = $(\".fieldName\");\r\n  let jqCardView = $(\".cardView\");\r\n  let jqAutoComplete = $(\".autoComplete\");\r\n  let jqCalcCompare = $(\".calcCompare\");\r\n  let jqDotNotation = $(\".dotNotation\");\r\n  let jqSublabel = $(\".sublabel\");\r\n  let jqBasicValue = $(\".basicValue\");\r\n  let jqUrl = $(\".url\");\r\n  let jqNumber = $(\".number\");\r\n  let jqFormat = $(\".format\");\r\n  let jqAltText = $(\".altText\");\r\n  let jqMainImage = $(\".mainImage\");\r\n  let jqUnsupportedValue = $(\".unsupportedValue\");\r\n\r\n  for (let i = 0; i < propertyKeysOrdered.length; ++i) {\r\n    const propertyName = propertyKeysOrdered[i];\r\n    const propertyValue = value.properties[propertyName];\r\n    jqFields.first().val(propertyName);\r\n    switch (propertyValue.type) {\r\n      case \"Double\":\r\n      case \"Boolean\":\r\n      case \"String\":\r\n        jqBasicValue.first().val(propertyValue.basicValue);\r\n        jqBasicValue = jqBasicValue.slice(1);\r\n        break;\r\n      case \"WebImage\":\r\n        jqUrl.first().val(propertyValue.address);\r\n        jqAltText.first().val(propertyValue.altText);\r\n        jqUrl = jqUrl.slice(1);\r\n        jqAltText = jqAltText.slice(1);\r\n        if (value.layouts != undefined)\r\n          if (value.layouts.card[\"mainImage\"] != undefined) {\r\n            if (value.layouts.card.mainImage.property == propertyName) {\r\n              jqMainImage.first().prop(\"checked\", true);\r\n            }\r\n          }\r\n        break;\r\n      case \"FormattedNumber\":\r\n        jqNumber.first().val(propertyValue.basicValue);\r\n        jqFormat.first().val(propertyValue.numberFormat);\r\n        jqNumber = jqNumber.slice(1);\r\n        jqFormat = jqFormat.slice(1);\r\n        break;\r\n      default:\r\n        jqUnsupportedValue.first().val(JSON.stringify(propertyValue));\r\n        jqUnsupportedValue = jqUnsupportedValue.slice(1);\r\n        break;\r\n    }\r\n    let featureIntegration: Excel.CellValuePropertyMetadataExclusions = {\r\n      cardView: false,\r\n      autoComplete: false,\r\n      calcCompare: false,\r\n      dotNotation: false\r\n    };\r\n    let sublabel = \"\";\r\n    if (typeof propertyValue.propertyMetadata == \"object\") {\r\n      if (typeof propertyValue.propertyMetadata.excludeFrom == \"object\") {\r\n        featureIntegration = Object.assign(featureIntegration, propertyValue.propertyMetadata.excludeFrom);\r\n      }\r\n      if (typeof propertyValue.propertyMetadata.sublabel == \"string\") {\r\n        sublabel = propertyValue.propertyMetadata.sublabel;\r\n      }\r\n    }\r\n    jqCardView.first().prop(\"checked\", !featureIntegration.cardView);\r\n    jqAutoComplete.first().prop(\"checked\", !featureIntegration.autoComplete);\r\n    jqCalcCompare.first().prop(\"checked\", !featureIntegration.calcCompare);\r\n    jqDotNotation.first().prop(\"checked\", !featureIntegration.dotNotation);\r\n    jqSublabel.first().val(sublabel);\r\n    jqFields = jqFields.slice(1);\r\n    jqCardView = jqCardView.slice(1);\r\n    jqAutoComplete = jqAutoComplete.slice(1);\r\n    jqCalcCompare = jqCalcCompare.slice(1);\r\n    jqDotNotation = jqDotNotation.slice(1);\r\n    jqSublabel = jqSublabel.slice(1);\r\n  }\r\n}\r\n\r\n/** Default helper for invoking an action and handling errors. */\r\nasync function tryCatch(callback) {\r\n  try {\r\n    await callback();\r\n  } catch (error) {\r\n    alert(\"Error in running script:\\n\\n\" + error + \".\");\r\n    console.error(error);\r\n  }\r\n}\r\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[15797]();\n"],"names":["setData","Excel","run","context","__awaiter","_this","workbook","getActiveCell","valuesAsJson","createValueAsJson","tryCatch","sync","_a","sent","clearForm","getData","activeCell","load","value","valueType","type","$","val","setSelectedType","getTypeContent","basicValue","address","altText","numberFormat","sections","undefined","layouts","card","layout","properties","Object","keys","referencedValues","JSON","stringify","style","display","onclick","provider","description","logoTargetAddress","logoSourceAddress","propertyKeysOrdered","i","length","last","title","sectionKeys","remove","j","append","specificFieldContent","propertyName","push","propertyValue","entityContentsDiv","parent","next","children","replaceWith","entityContents","before","text","compact","jqFields","jqCardView","jqAutoComplete","jqCalcCompare","jqDotNotation","jqSublabel","jqBasicValue","jqUrl","jqNumber","jqFormat","jqAltText","jqMainImage","jqUnsupportedValue","first","slice","mainImage","property","prop","featureIntegration","cardView","autoComplete","calcCompare","dotNotation","sublabel","propertyMetadata","excludeFrom","assign","getEntity","toString","Office","onReady","info","host","HostType","document","getElementById","on","defaultType","textInputWithLabel","inputID","labelText","for","class","id","alt","checkboxWithLabel","checked","basicContent","contentType","createOptionsFromList","list","options","forEach","noSpaceVal","replace","content","label","select","name","onchange","item","selectedIndex","disabled","table","div","iconlabel","contentLabel","values","EntityCompactLayoutIcons","fields","section","newFieldButton","defaultSection","entityDefaultSection","input","providerTable","referencedValuesLabel","referencedValuesInput","referencedValuesClearButton","referencedValuesDiv","providerInfo","entityContent","trKey","tdMetadata","trMetadata","trButtons","tdButtons","buttonToggleMetadata","visibility","selected","element","stringValue","CellValueType","string","doubleValue","Number","isNaN","double","alert","booleanValue","toLowerCase","boolean","mainImageKey","iconName","valuesFromQuery","jqFieldContents","attr","formattedNumber","webImage","parse","fieldValuesContentsFromQuery","cardViews","autoCompletes","calcCompares","sublabels","mainImageExists","sectionArray","jqSectionContents","fDefaultSection","find","sectionTitle","sectionEntry","entity","field","setEntity","url","format","query","jq","result","is","callback","error_1","console","error"],"sourceRoot":""}